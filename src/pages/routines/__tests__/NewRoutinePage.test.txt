import { render, screen, waitFor, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import { ChakraProvider } from "@chakra-ui/react";
import { MemoryRouter, Route, Routes } from "react-router-dom";
import "@testing-library/jest-dom";
import { configureStore } from "@reduxjs/toolkit";
import workoutSessionsReducer from "../../../features/workout/workoutSessionsSlice";
import chosenDayReducer from "../../../features/workout/dayInCalendarSlice";
import activeExerciseInstanceReducer from "../../../features/workout/activeExerciseInstanceSlice";
import authenticatedUserReducer from "../../../features/auth/authenticatedUserSlice";
import exercisesReducer from "../../../features/exercises/exercisesSlice";
import routinesReducer from "../../../features/routines/routinesSlice";
import categoriesReducer from "../../../features/exercises/categoriesSlice";
import { workoutsForUser } from "../../../mockData/handlers/workoutsForUserHandler";
import { categories } from "../../../mockData/handlers/categoriesHandler";
import { initializedUser } from "../../../mockData/authHandlers/initializeUserHandler";
import { exerciseTypesForUser } from "../../../mockData/handlers/exerciseTypesForUserHandler";
import RoutinesPage from "../RoutinesPage";
import NewRoutinePage from "../NewRoutinePage";

const store = configureStore({
  reducer: {
    workoutSessions: workoutSessionsReducer,
    chosenDay: chosenDayReducer,
    activeExerciseInstance: activeExerciseInstanceReducer,
    authenticatedUser: authenticatedUserReducer,
    exercises: exercisesReducer,
    routines: routinesReducer,
    categories: categoriesReducer,
  },
  preloadedState: {
    authenticatedUser: {
      user: initializedUser,
      loading: false,
      error: null,
    },
    workoutSessions: {
      workouts: workoutsForUser,
      loading: false,
      error: null,
    },
    exercises: {
      exercises: exerciseTypesForUser,
      loading: false,
      error: null,
    },
    categories: {
      categories: categories,
      loading: false,
      error: null,
    },
  },
});

const renderWithProviders = (ui: React.ReactElement) => {
  return render(
    <ChakraProvider>
      <Provider store={store}>
        <MemoryRouter initialEntries={["/routines/new-routine"]}>
          <Routes>
            <Route path="/routines/new-routine" element={ui} />
            <Route path="/routines" element={<RoutinesPage />} />
          </Routes>
        </MemoryRouter>
      </Provider>
    </ChakraProvider>
  );
};

describe("NewRoutinePage", () => {
  test("renders the heading, inputs and exercises correctly", async () => {
    renderWithProviders(<NewRoutinePage />);
    await waitFor(() => {
      expect(screen.getByText("Add a new routine")).toBeInTheDocument();
    });

    expect(screen.getByPlaceholderText("Enter a name")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Filter")).toBeInTheDocument();
  });

  test("adds a new routine with exercises and renders the routines page when 'Create' is clicked", async () => {
    renderWithProviders(<NewRoutinePage />);

    await waitFor(() => {
      expect(screen.getByText("Create")).toBeInTheDocument();
    });

    fireEvent.change(screen.getByPlaceholderText("Enter a name"), {
      target: { value: "brand-new routine" },
    });

    expect(screen.getByDisplayValue("brand-new routine")).toBeInTheDocument();

    await waitFor(() => {
      expect(screen.getByPlaceholderText("Filter")).toBeInTheDocument();
    });

    // fireEvent.change(screen.getByPlaceholderText("Filter"), {
    //   target: { value: "bench press" },
    // });

    // await waitFor(() => {
    //   expect(screen.getByText("bench press")).toBeInTheDocument();
    // });

    // fireEvent.click(screen.getByTestId("not selected checkbox"));

    fireEvent.click(screen.getByText("Create"));
    // await waitFor(() =>
    //   expect(screen.getByText("New routine")).toBeInTheDocument()
    // );
    // await waitFor(() =>
    //   expect(screen.getByText("brand-new routine")).toBeInTheDocument()
    // );
    // await waitFor(() => expect(screen.getAllByText("exercise1")).toHaveLength(1));
  });

  test("attempt at adding a routine with no name renders an error", () => {
    renderWithProviders(<NewRoutinePage />);
    waitFor(() => {
      expect(screen.getByText("Create.")).toBeInTheDocument();
      fireEvent.click(screen.getByText("Create"));
    });

    waitFor(() =>
      expect(
        screen.getByText("Routine name cannot be empty.")
      ).toBeInTheDocument()
    );
  });
});
